{"version":3,"file":"seo-analyzer.min.js","sources":["../src/rules/index.js","../src/rules/TitleLengthRule.js","../src/rules/HTagsRule.js","../src/rules/NoTooManyStrongTagsRule.js","../src/rules/NoMoreThanOneH1TagRule.js","../src/rules/ImgTagWithAltAttritubeRule.js","../src/rules/ATagWithRelAttritubeRule.js","../src/rules/CanonicalLinkRule.js","../src/rules/MetaBaseRule.js","../src/rules/MetaSocialRule.js","../src/modules/logger.js","../src/modules/scraper.js","../src/modules/input.js","../src/modules/analyzer.js","../src/modules/output.js","../src/server.js","../src/index.js"],"sourcesContent":["import titleLengthRule from './TitleLengthRule';\nimport hTagsRule from './HTagsRule';\nimport noTooManyStrongTagsRule from './NoTooManyStrongTagsRule';\nimport noMoreThanOneH1TagRule from './NoMoreThanOneH1TagRule';\nimport imgTagWithAltAttritubeRule from './ImgTagWithAltAttritubeRule';\nimport aTagWithRelAttritubeRule from './ATagWithRelAttritubeRule';\nimport canonicalLinkRule from './CanonicalLinkRule';\nimport metaBaseRule from './MetaBaseRule';\nimport metaSocialRule from './MetaSocialRule';\n\nconst defaultRules = {\n  titleLengthRule,\n  hTagsRule,\n  noTooManyStrongTagsRule,\n  noMoreThanOneH1TagRule,\n  imgTagWithAltAttritubeRule,\n  aTagWithRelAttritubeRule,\n  canonicalLinkRule,\n  metaBaseRule,\n  metaSocialRule\n};\n\nexport default defaultRules;\n","function titleLengthRule(dom, options) {\n  return new Promise(resolve => {\n    const document = dom.window.document;\n    const title = document.querySelector('title');\n    if (!title) {\n      resolve('This HTML without <title> tag');\n    }\n    // If title exists in the DOM\n    const titleLength = title.length;\n    if (titleLength < options.min) {\n      resolve(\n        `<title> too short(${titleLength}). The minimum length should be ${options.min} characters.`\n      );\n    }\n    if (titleLength > options.max) {\n      resolve(\n        `<title> too long(${titleLength}). The maximum length should be ${options.max} characters.`\n      );\n    }\n    resolve(null);\n  });\n}\n\nexport default titleLengthRule;\n","function HTagsRule(dom) {\n  return new Promise(resolve => {\n    let report = '';\n    const hTags = dom.window.document.querySelectorAll(\n      'h1, h2, h3, h4, h5, h6'\n    );\n\n    for (let index = 0; index < hTags.length; index += 1) {\n      const currentHTag = hTags[index];\n      const nextHTag = hTags[index + 1];\n      if (nextHTag) {\n        const currentHTagLevel = currentHTag.tagName\n          .toLowerCase()\n          .replace('h', '');\n        const nextHTagLevel = nextHTag.tagName.toLowerCase().replace('h', '');\n        if (currentHTagLevel < nextHTagLevel - 1) {\n          if (currentHTagLevel !== nextHTagLevel - 1) {\n            const message = `Tag <h${nextHTagLevel}>${hTags[\n              index + 1\n            ].textContent\n              .replace(/(\\r\\n|\\n|\\r)/gm, '')\n              .trim()}</h${nextHTagLevel}> should be </h${\n              +currentHTagLevel + 1\n            }>`;\n            report += message;\n          }\n        }\n      }\n    }\n\n    resolve(report);\n  });\n}\n\nexport default HTagsRule;\n","function noTooManyStrongTagsRule(dom, options) {\n  return new Promise(resolve => {\n    const elements = dom.window.document.querySelectorAll('strong');\n    if (elements && elements.length > options.threshold) {\n      resolve(`This HTML have more than ${options.threshold} <strong> tags`);\n    }\n    resolve(null);\n  });\n}\n\nexport default noTooManyStrongTagsRule;\n","function noMoreThanOneH1TagRule(dom) {\n  return new Promise(resolve => {\n    const elements = dom.window.document.querySelectorAll('h1');\n    if (elements && elements.length > 1) {\n      resolve('This HTML have more than one <h1> tag');\n    }\n    resolve(null);\n  });\n}\n\nexport default noMoreThanOneH1TagRule;\n","function imgTagWithAltAttritubeRule(dom) {\n  return new Promise(resolve => {\n    let count = 0;\n    const elements = dom.window.document.querySelectorAll('img');\n    elements.forEach(element => {\n      if (!element.alt) {\n        count++;\n      }\n    });\n    if (count > 0) {\n      resolve(`There are ${count} <img> tag without alt attribute`);\n    }\n    resolve(null);\n  });\n}\n\nexport default imgTagWithAltAttritubeRule;\n","function aTagWithRelAttritubeRule(dom) {\n  return new Promise(resolve => {\n    let count = 0;\n    const elements = dom.window.document.querySelectorAll('a');\n    elements.forEach(element => {\n      if (!element.rel) {\n        count++;\n      }\n    });\n    if (count > 0) {\n      resolve(`There are ${count} <a> tag without rel attribute`);\n    }\n    resolve(null);\n  });\n}\n\nexport default aTagWithRelAttritubeRule;\n","function canonicalLinkRule(dom) {\n  return new Promise(resolve => {\n    const element = dom.window.document.querySelector(\n      'head > link[rel=\"canonical\"]'\n    );\n    if (!element) {\n      resolve('This HTML without <link rel=\"canonical\" href=\"...\"> link');\n    }\n    if (element && !element.href) {\n      resolve('The canonical link without href attribute');\n    }\n    if (element && element.href.substr(-1) !== '/') {\n      resolve(\n        'The href attribute does not have a slash at the end of the link.'\n      );\n    }\n    resolve(null);\n  });\n}\n\nexport default canonicalLinkRule;\n","function metaBaseRule(dom, options = { list: [] }) {\n  return new Promise(resolve => {\n    const report = [];\n    if (options && options.names && options.names.length) {\n      options.names.forEach(name => {\n        const element = dom.window.document.querySelector(\n          `head > meta[name=\"${name}\"]`\n        );\n        if (!element) {\n          report.push(`This HTML without <meta name=\"${name}\"> tag`);\n        } else if (!element.content) {\n          report.push(\n            `The content attribute for the <meta name=\"${name}\" content=\"\"> tag is empty`\n          );\n        }\n      });\n    }\n    resolve(report);\n  });\n}\n\nexport default metaBaseRule;\n","function metaSocialRule(dom, options = { properties: [] }) {\n  return new Promise(resolve => {\n    const report = [];\n    if (options && options.properties && options.properties.length) {\n      options.properties.forEach(property => {\n        const element = dom.window.document.querySelector(\n          `head > meta[property=\"${property}\"]`\n        );\n        if (!element) {\n          report.push(`This HTML without <meta property=\"${property}\"> tag`);\n        } else if (!element.content) {\n          report.push(\n            `The content attribute for the <meta property=\"${property}\" content=\"\"> tag is empty`\n          );\n        }\n      });\n    }\n    resolve(report);\n  });\n}\n\nexport default metaSocialRule;\n","import CFonts from 'cfonts';\nimport _colors from 'colors';\n\nclass Analyzer {\n  /**\n   * Print formatted result to console\n   * @param {Array} - Array of reports\n   * @returns {Error} - Stop execution and print error\n   */\n  result(result) {\n    this._logResult(result);\n  }\n\n  /**\n   * Print error message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  error(error) {\n    this._logError(error);\n  }\n\n  /**\n   * Print success message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  success(success) {\n    this._logSuccess(success);\n  }\n\n  /**\n   * Print info message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  info(info) {\n    this._logInfo(info);\n  }\n\n  /**\n   * Print beautiful message to console\n   * @param {String} - Result message\n   * @returns {String} - Print CFonts message to console\n   */\n  printTextToConsole(text) {\n    const formattedText = text.replace(' ', '|');\n    CFonts.say(formattedText, {\n      font: 'block', // define the font face\n      align: 'left', // define text alignment\n      colors: ['system'], // define all colors\n      background: 'transparent', // define the background color, you can also use `backgroundColor` here as key\n      letterSpacing: 1, // define letter spacing\n      lineHeight: 1, // define the line height\n      space: true, // define if the output text should have empty lines on top and on the bottom\n      maxLength: '0', // define how many character can be on one line\n      gradient: false, // define your two gradient colors\n      independentGradient: false, // define if you want to recalculate the gradient for each new line\n      transitionGradient: false, // define if this is a transition between colors directly\n      env: 'node' // define the environment CFonts is being executed in\n    });\n  }\n\n  /**\n   * @param {Array} - Array of reports\n   * @returns {Error} - Stop execution and print error\n   * @private\n   * @memberof Analyzer\n   * @description Print result message to console\n   */\n  _logResult(result) {\n    if (!result.some(r => r.report.length))\n      return this._logSuccess('üëç SEO defects were not detected.\\n');\n\n    this._logInfo('\\nüöÄ  Report of errors');\n\n    for (const item of result) {\n      this._logInfo(`\\nFile: ${item.source.trim()}`);\n      this._logError(`${item.report.join('\\n')}`);\n    }\n\n    this._logSuccess(\n      '\\n-------- üöÄ Finished! --------\\nThanks for using Seo Analyzer!\\n'\n    );\n\n    return process.exit(1); // Stop process in terminal\n  }\n\n  /**\n   * @param {String} - Error object\n   * @returns {String} - Stop execution and print error\n   * @private\n   * @memberof Analyzer\n   * @description Print error message to console\n   */\n  _logError(error) {\n    console.error(`${_colors.red(error)}`);\n  }\n\n  /**\n   * @param {String} - Error object\n   * @returns {String} - Stop execution and print error\n   * @private\n   * @memberof Analyzer\n   * @description Print error message to console\n   */\n  _logInfo(info) {\n    console.log(`${_colors.yellow(info)}`);\n  }\n\n  /**\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   * @private\n   * @memberof Analyzer\n   */\n  _logSuccess(success) {\n    console.log(`${_colors.green(success)}`);\n  }\n}\n\nexport default Analyzer;\n","import axios from 'axios';\nimport sitemaps from 'sitemap-stream-parser';\nimport cliProgress from 'cli-progress';\nimport _colors from 'colors';\nimport Logger from './logger';\n\nclass Scanner {\n  constructor() {\n    this.consoleProgressBar = new cliProgress.Bar({\n      format:\n        'Processing... |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Pages',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.logger = new Logger();\n    this.inputUrl = '';\n    this.ignoreUrls = '';\n  }\n\n  /**\n   * @param {Number} port - Port for the server to listen on\n   * @returns {Array} - Array of html doms\n   * @description - Scrapes the site and returns the html doms\n   */\n  async run(port, urls) {\n    this.inputUrl = `http://localhost:${port}`;\n    this.ignoreUrls = urls;\n    const links = await this._getLinksFromSitemap();\n    const htmlDoms = await this._getHtmlDomFromLinks(links);\n    return htmlDoms;\n  }\n\n  /**\n   * Get the links from the sitemap\n   * @returns {Array} - Array of links\n   * @description - Scrapes the sitemap and returns the links\n   */\n  _getLinksFromSitemap() {\n    this.logger.info(`üöÄ  Get sitemap from ${this.inputUrl}\\n`);\n    return new Promise(resolve => {\n      const formatttedUrl = `${this.inputUrl}/sitemap.xml`;\n      const links = [];\n      sitemaps.parseSitemaps(\n        formatttedUrl,\n        link => {\n          // Ignore the links that are in the ignore list\n          const path = link.replace(/^.*\\/\\/[^/]+/, '');\n          if (this.ignoreUrls.indexOf(path) === -1) {\n            links.push(this._formatLink(link));\n          }\n        },\n        err => {\n          if (err) {\n            this.logger.error('‚ùå  Sitemap not found\\n');\n            process.exit(1);\n          } else {\n            if (links.length === 0) {\n              this.logger.error('‚ùå  Links not found\\n');\n              process.exit(1);\n            } else {\n              this.logger.success('‚úÖ  Done\\n');\n              resolve(links);\n            }\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Formats the link to be used in axios\n   * @param {String} link\n   * @returns {String} - Formatted link > http://localhost:{port}/link\n   */\n  _formatLink(link) {\n    const result = link.replace(/^.*\\/\\/[^/]+/, this.inputUrl);\n    return result;\n  }\n\n  /**\n   * Sleep for the given time in milliseconds\n   * @param {Number} ms\n   * @returns {Promise}\n   */\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get the html doms from the links\n   * @param {Array} links - Array of links\n   * @returns {Array} - Array of html doms\n   * @description - Scrapes the links and returns the html doms\n   */\n  async _getHtmlDomFromLinks(links) {\n    const htmlDoms = [];\n    const promises = [];\n    this.logger.info('üöÄ  Parsing HTML\\n');\n\n    // Start the progress bar\n    this.consoleProgressBar.start(links.length, 0);\n\n    for (const link of links) {\n      promises.push(\n        axios\n          .get(link)\n          .then(res => {\n            if (res && res.status === 200) {\n              htmlDoms.push({ source: link, text: res.data });\n            }\n          })\n          .catch(error => {\n            const err =\n              (error && error.response && error.response.status) || 500;\n            console.log(`Error: ${error} - ${link}`);\n            console.log(\n              `\\n${_colors.yellow('==>')} ${_colors.white(link)} ${_colors.red(\n                err\n              )}`\n            );\n          })\n          .finally(() => {\n            this.consoleProgressBar.increment();\n          })\n      );\n      await this.sleep(500);\n    }\n\n    return Promise.all(promises).then(() => {\n      // // Stop the progress bar\n      this.consoleProgressBar.stop();\n      return htmlDoms;\n    });\n  }\n}\n\nexport default Scanner;\n","import fs from 'fs';\nimport path from 'path';\nimport { JSDOM, VirtualConsole } from 'jsdom';\nimport cliProgress from 'cli-progress';\nimport _colors from 'colors';\nimport Logger from './logger';\nimport Scraper from './scraper';\n\nclass Input {\n  constructor() {\n    this.logger = new Logger();\n    this.scraper = new Scraper();\n    this.consoleProgressBar = new cliProgress.Bar({\n      format:\n        'Processing... |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Folders',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.badType =\n      'The inputFiles function takes an array only [\"index.html\", \"...\", \"...\"]';\n    this.emptyList =\n      'You need to pass an array to the inputFiles function [\"index.html\", \"...\", \"...\"]';\n    this.ignoreFolders = [];\n    this.ignoreFiles = [];\n  }\n\n  /**\n   * Get the html from files\n   * @param {Array} files [<string>, <string>, ...]\n   * @returns {Promise.Array} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @memberof Input\n   */\n  async files(files = [], ignoreFiles = []) {\n    this.logger.info('\\nüöÄ  Analysis of files');\n    if (files.length === 0) {\n      this.logger.error(this.emptyList);\n    }\n    if (!Array.isArray(files)) {\n      this.logger.error(this.badType);\n    }\n    this.ignoreFiles = ignoreFiles;\n    const listTexts = await this._getHtml(files);\n    const listDOM = await this._getDom(listTexts);\n    return listDOM;\n  }\n\n  /**\n   * Get the html from files in folders\n   * @param {string} folders [<string>, <string>, ...]\n   * @returns {Promise.Array} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @memberof Input\n   */\n  async folders(folders = [], ignoreFolders = [], ignoreFiles = []) {\n    this.logger.info('üöÄ  Parsing folders\\n');\n\n    // Start the progress bar\n    this.consoleProgressBar.start(folders.length, 0);\n    this.ignoreFolders = ignoreFolders;\n    this.ignoreFiles = ignoreFiles;\n\n    const files = await this._getFilesFromFolders(folders);\n    const listDOM = await this.files(files, ignoreFiles);\n    return listDOM;\n  }\n\n  /**\n   * Get the DOM from urls\n   * @param {Number} - Port for the server\n   * @param {Array} - Ignore urls\n   * @returns {Promise.Array} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   */\n  async spa(port, ignoreUrls = []) {\n    const listTexts = await this.scraper.run(port, ignoreUrls);\n    const htmlDoms = await this._getDom(listTexts);\n    return htmlDoms;\n  }\n\n  /**\n   * Get all files from folders\n   * @param {Array} folders [<string>, <string>, ...]\n   * @returns {Promise.Array} [<string>, <string>, ...]\n   * @private\n   * @example ['html', 'dist', 'src']\n   */\n  async _getFilesFromFolders(folders = []) {\n    const files = [];\n    for (const folder of folders) {\n      const result = await this._getFilesFromFolder(folder);\n\n      // Update the progress bar\n      this.consoleProgressBar.increment();\n\n      files.push(...result);\n    }\n\n    // Stop the progress bar\n    this.consoleProgressBar.stop();\n\n    return files;\n  }\n\n  /**\n   * Get files from folder\n   * @param {string} folder\n   * @returns {Promise.Array} [<string>, <string>, ...]\n   * @private\n   * @memberof Input\n   */\n  _getFilesFromFolder(folder = []) {\n    try {\n      const entryPaths = fs\n        .readdirSync(folder)\n        .map(entry => path.join(folder, entry));\n      const filePaths = entryPaths.filter(\n        entryPath =>\n          fs.statSync(entryPath).isFile() && path.extname(entryPath) === '.html'\n      );\n      const dirPaths = entryPaths.filter(\n        entryPath =>\n          !filePaths.includes(entryPath) && fs.statSync(entryPath).isDirectory()\n      );\n      const dirFiles = dirPaths\n        .filter(p => !this.ignoreFolders.includes(p))\n        .reduce(\n          (prev, curr) => prev.concat(this._getFilesFromFolder(curr)),\n          []\n        );\n      return [...filePaths, ...dirFiles];\n    } catch (error) {\n      this.logger.error(`Folder \"${folder}\" not found`);\n      return [];\n    }\n  }\n\n  /**\n   * Get the html from file\n   * @param {*} files [<string>, <string>, ...]\n   * @returns {Promise.Array} ['<html><body>...</body></html>', '<html><body>...</body></html>', ...]\n   * @private\n   * @memberof Input\n   */\n  _getHtml(files) {\n    const listTexts = [];\n    files.forEach(file => {\n      if (this.ignoreFiles.includes(file)) return;\n      try {\n        const text = fs.readFileSync(file, 'utf8');\n        listTexts.push({ source: file, text });\n      } catch (error) {\n        this.logger.error(`File \"${file}\" not found`);\n      }\n    });\n    return listTexts;\n  }\n\n  /**\n   * Transform html to DOM\n   * @param {Array} list [<string>, <string>, ...]\n   * @returns {Promise.Array} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @private\n   */\n  _getDom(list) {\n    const doms = [];\n    const proccess = new cliProgress.Bar({\n      format:\n        'Handling html |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Sources',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.logger.info('\\nüöÄ  Get DOM from HTML\\n');\n    proccess.start(list.length, 0);\n    // NOTE: https://github.com/jsdom/jsdom/issues/2177#issuecomment-379212964\n    const virtualConsole = new VirtualConsole();\n    list.forEach(item => {\n      let dom = new JSDOM(item.text, { virtualConsole });\n      doms.push({ source: item.source, dom });\n      proccess.increment();\n    });\n\n    proccess.stop();\n    return doms;\n  }\n}\n\nexport default Input;\n","import cliProgress from 'cli-progress';\nimport _colors from 'colors';\n\nclass Analyzer {\n  constructor() {\n    this.consoleProgressBar = new cliProgress.Bar({\n      format:\n        'Ranning rules |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Rules',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.badType =\n      'The inputFiles function takes an array only [\"index.html\", \"...\", \"...\"]';\n    this.emptyList =\n      'You need to pass an array to the inputFiles function [\"index.html\", \"...\", \"...\"]';\n  }\n\n  /**\n   * Run analyzer for a list of doms\n   * @param {JSDOM<array>} doms - The html dom list to run the rule on\n   * @param {Array} rules - The rules to run\n   * @returns {Array} - Array of error result [{ file, report }, { file, report }, { file, report }]\n   */\n  async run(inputData, rules) {\n    if (inputData.length === 0) {\n      this.logger.error(this.emptyList);\n    }\n    if (!Array.isArray(inputData)) {\n      this.logger.error(this.badType);\n    }\n    const report = await this._startAnalyzer(inputData, rules);\n    return report;\n  }\n\n  /**\n   * @param {Array} dataList - html doms\n   * @param {Array} rules - List rulers\n   * @returns {Array} - Array of reports [{file, report}, {file, report}, {file, report}]\n   */\n  async _startAnalyzer(dataList, rules) {\n    const result = [];\n    for (const item of dataList) {\n      console.log(\n        `\\n${_colors.blue('==>')} Analysis ${_colors.white(item.source)}`\n      );\n\n      const report = await this._analyzeDOM(item.dom, rules);\n\n      if (report && report.length) {\n        result.push({\n          source: item.source,\n          report\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Run analyzer for a single dom\n   * @param {*} dom - The html dom element to run the rule on\n   * @param {*} rules - The rules to run\n   * @returns {Array} - Array of error result ['error', 'error', 'error']\n   */\n  async _analyzeDOM(dom, rules) {\n    const result = [];\n    // Start the progress bar\n    this.consoleProgressBar.start(rules.length, 0);\n\n    for (const item of rules) {\n      let report = null;\n      try {\n        report = await item.rule(dom, item.options);\n      } catch (error) {\n        report = error;\n      }\n      if (Array.isArray(report)) {\n        result.push(...report);\n      } else {\n        if (report) {\n          result.push(report);\n        }\n      }\n\n      // Update the progress bar\n      this.consoleProgressBar.increment();\n    }\n\n    // Stop the progress bar\n    this.consoleProgressBar.stop();\n\n    return result;\n  }\n}\n\nexport default Analyzer;\n","import Analyzer from './analyzer';\n\nclass Output {\n  constructor() {\n    this.analyzer = new Analyzer();\n  }\n\n  /**\n   * @param {Array} data - List of files and folders\n   * @param {Array} rules - List of rules\n   * @returns {Promise} - Returns js object [{file, report}, ...]\n   */\n  async object(inputData, rules) {\n    const report = await this.analyzer.run(inputData, rules);\n    return report;\n  }\n\n  /**\n   * @param {Array} data - List of files and folders\n   * @param {Array} rules - List of rules\n   * @returns {JSON} - Returns json [{\"file\", \"report\"}, ...]\n   */\n  async json(inputData, rules) {\n    const report = await this.analyzer.run(inputData, rules);\n    return JSON.stringify(report, null, 2);\n  }\n}\n\nexport default Output;\n","import express from 'express';\nimport path from 'path';\nimport Logger from './modules/logger';\n\nconst app = express();\n\nconst logger = new Logger();\n\n/**\n * Start the server on the given port and use static files from the given path.\n * @param {String} folder - The path to the static files.\n * @param {Number} port - The port to start the server on.\n */\nexport function startServer(folder, port) {\n  app.use(express.static(folder));\n\n  // sendFile will go here\n  app.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, '/index.html'));\n  });\n\n  app.listen(port);\n\n  logger.info(`üöÄ  Server started on port ${port}\\n`);\n\n  logger.success('‚úÖ  Done\\n');\n}\n","import defaultRules from './rules/index';\n\nimport Input from './modules/input';\nimport Output from './modules/output';\nimport Logger from './modules/logger';\n\nimport { startServer } from './server';\n\nclass SeoAnalyzer {\n  constructor() {\n    this.logger = new Logger();\n    this.input = new Input();\n    this.output = new Output();\n    this.inputData = [];\n    this.rules = [];\n    this._ignoreFolders = [];\n    this._ignoreFiles = [];\n    this._ignoreUrls = [];\n    return this;\n  }\n\n  // --------- Ignore methods --------- //\n  ignoreFiles(files) {\n    this._ignoreFiles = files;\n    return this;\n  }\n\n  ignoreFolders(folders) {\n    this._ignoreFolders = folders;\n    return this;\n  }\n\n  ignoreUrls(urls) {\n    this._ignoreUrls = urls;\n    return this;\n  }\n\n  // ------- Input methods ------- //\n  inputFiles(files) {\n    if (this.inputData.length !== 0) return this;\n    this.logger.printTextToConsole('Seo Analyzer');\n    this.inputData = this.input.files(files, this._ignoreFiles);\n    return this;\n  }\n\n  inputFolders(folders) {\n    if (this.inputData.length !== 0) return this;\n    this.logger.printTextToConsole('Seo Analyzer');\n    this.inputData = this.input.folders(\n      folders,\n      this._ignoreFolders,\n      this._ignoreFiles\n    );\n    return this;\n  }\n\n  inputSpaFolder(folder, port = 9999) {\n    if (!this.inputData) return this;\n    this.logger.printTextToConsole('Seo Analyzer');\n    // Run server for spa\n    startServer(folder, port);\n    this.inputData = this.input.spa(port, this._ignoreUrls);\n    return this;\n  }\n\n  // --------- Add Rule --------- //\n  addRule(func, options = {}) {\n    if (typeof func === 'string') {\n      if (func in defaultRules) {\n        this.rules.push({ rule: defaultRules[func], options });\n      }\n    } else {\n      this.rules.push({ rule: func, options });\n    }\n    return this;\n  }\n\n  // ------- Output methods ------- //\n  outputConsole() {\n    (async () => {\n      const json = await this.output.object(await this.inputData, this.rules);\n      this.logger.result(json);\n    })();\n    return this;\n  }\n\n  outputJson(callback) {\n    (async () => {\n      const json = await this.output.json(await this.inputData, this.rules);\n      callback(json);\n    })();\n    return this;\n  }\n\n  outputObject(callback) {\n    (async () => {\n      const obj = await this.output.object(await this.inputData, this.rules);\n      callback(obj);\n    })();\n    return this;\n  }\n}\n\nexport default SeoAnalyzer;\n"],"names":["defaultRules","titleLengthRule","dom","options","Promise","resolve","title","window","document","querySelector","titleLength","length","min","max","report","hTags","querySelectorAll","index","currentHTag","nextHTag","currentHTagLevel","tagName","toLowerCase","replace","nextHTagLevel","textContent","trim","noTooManyStrongTagsRule","elements","threshold","noMoreThanOneH1TagRule","imgTagWithAltAttritubeRule","count","forEach","element","alt","aTagWithRelAttritubeRule","rel","canonicalLinkRule","href","substr","metaBaseRule","list","names","name","content","push","metaSocialRule","properties","property","Analyzer","[object Object]","result","this","_logResult","error","_logError","success","_logSuccess","info","_logInfo","text","formattedText","CFonts","say","font","align","colors","background","letterSpacing","lineHeight","space","maxLength","gradient","independentGradient","transitionGradient","env","some","r","item","source","join","process","exit","console","_colors","red","log","yellow","green","Scanner","consoleProgressBar","cliProgress","Bar","format","barCompleteChar","barIncompleteChar","hideCursor","logger","Logger","inputUrl","ignoreUrls","port","urls","links","_getLinksFromSitemap","_getHtmlDomFromLinks","formatttedUrl","sitemaps","parseSitemaps","link","path","indexOf","_formatLink","err","ms","setTimeout","htmlDoms","promises","start","axios","get","then","res","status","data","catch","response","white","finally","increment","sleep","all","stop","Input","scraper","Scraper","badType","emptyList","ignoreFolders","ignoreFiles","files","Array","isArray","listTexts","_getHtml","_getDom","folders","_getFilesFromFolders","run","folder","_getFilesFromFolder","entryPaths","fs","readdirSync","map","entry","filePaths","filter","entryPath","statSync","isFile","extname","dirFiles","includes","isDirectory","p","reduce","prev","curr","concat","file","readFileSync","doms","proccess","virtualConsole","VirtualConsole","JSDOM","inputData","rules","_startAnalyzer","dataList","blue","_analyzeDOM","rule","Output","analyzer","JSON","stringify","app","express","input","output","_ignoreFolders","_ignoreFiles","_ignoreUrls","printTextToConsole","use","static","req","sendFile","__dirname","listen","startServer","spa","func","json","object","callback","obj"],"mappings":"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"}